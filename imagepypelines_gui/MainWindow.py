#############################################################################
##
# Copyright (C) 2010 Riverbank Computing Limited.
# Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
# All rights reserved.
##
# This file is part of the examples of PyQt.
##
# $QT_BEGIN_LICENSE:BSD$
# You may use this file under the terms of the BSD license as follows:
##
# "Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the
# distribution.
# * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
# the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written
# permission.
##
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
# $QT_END_LICENSE$
##
#############################################################################

import math
import sys

# This is only needed for Python v2 but is harmless for Python v3.
import sip
sip.setapi('QString', 2)

import numpy as np
from PyQt4 import QtCore, QtGui

# to regenerate this file run: 
# pathToYourPython\Lib\site-packages\PyQt4\pyuic4.bat -x .\main.ui -o mainWindowUI.py
from mainWindowUI import Ui_ImagePypelines
# to regenerate this file run: 
# pathToYourPython\Lib\site-packages\PyQt4\pyrcc4.exe -py3 .\diagramscene.qrc -o .\diagramscene_rc3.py
# pathToYourPython\Lib\site-packages\PyQt4\pyrcc4.exe -py2 .\diagramscene.qrc -o .\diagramscene_rc2.py
# NOTE: diagramscene_rc.py is a import alias that will import the correct version,
#   which is necesary for the autogenerated ui.py file 
import diagramscene_rc

from diagram_items import Arrow, DiagramTextItem, DiagramItem
from diagramscene import DiagramScene

sys.path.insert(0, '..')   # ND FIXME: Hack for testing
import imagepypelines as ip
import cv2

from QtPipeline import QtPipeline
from QtBlock import QtBlock

class MainWindow(QtGui.QMainWindow, Ui_ImagePypelines):
    InsertTextButton = 10

    def __init__(self):
        super(MainWindow, self).__init__()

        self.loadSettings()

        self.setupUi(self)   # inherited from converted ui file

        self.pipelines = []
        
        self.addPipeline()
        self.createToolBox()
        self.connectActions()

        # TODO: decide on programmable interface / items to pass here
        self.interpwidget.locals.update({'ip':ip, 'np':np, 'numpy':np, 'cv':cv2, 
            'addPipeline':self.addPipeline, 'current_qpipeline':self.active_scene,
            'switchPipeline':self.switchPipeline})

    def closeEvent(self, event):
        self.saveSettings()
        super(MainWindow, self).closeEvent(event)

    def addPipeline(self, pipeline=None):
        print(pipeline)

        self.pipelines.append(QtPipeline(self.menuBlock, pipeline=pipeline))
        self.pipelines[-1].itemInserted.connect(self.itemInserted)
        self.pipelines[-1].textInserted.connect(self.textInserted)
        self.pipelines[-1].itemSelected.connect(self.itemSelected)

        self.graphicsView.setScene(self.pipelines[-1])
        self.active_scene = self.pipelines[-1]

        try:
            self.pipelineSelector.addItem(self.pipelines[-1].name)
        except:
            self.pipelineSelector.addItem('Pipeline '+str(len(self.pipelines)))

        self.pipelineSelector.setCurrentIndex(len(self.pipelines)-1)

    def switchPipeline(self, new_idx):
        # TODO figure out if slots/signals need to be connected here
        # TODO maybe reset the scrolling?
        new_idx = max(min(new_idx, len(self.pipelines)), 0)   # clip to range
        self.graphicsView.setScene(self.pipelines[new_idx])
        self.active_scene = self.pipelines[new_idx]

    def loadPipelineFromFile(self):
        # TODO set opening directory to something useful / make it a setting
        filename = QtGui.QFileDialog.getOpenFileName(self, 'Open Pipeline File', 'c:\\', 'Pipeline Files (*.pck);;All Files (*)')
        if filename:
            pipeline = ip.restore_from_file(filename)
            self.addPipeline(pipeline)

    def savePipelineToFile(self):
        # TODO set opening directory to something useful / make it a setting
        filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Pipeline File', 'c:\\', 'Pipeline Files (*.pck);;All Files (*)')
        if filename:
            self.active_scene.save(filename)

    def backgroundButtonGroupClicked(self, button):
        buttons = self.backgroundButtonGroup.buttons()
        for myButton in buttons:
            if myButton != button:
                button.setChecked(False)

        text = button.text()
        if text == "Blue Grid":
            self.active_scene.setBackgroundBrush(QtGui.QBrush(
                QtGui.QPixmap(':/images/background1.png')))
        elif text == "White Grid":
            self.active_scene.setBackgroundBrush(QtGui.QBrush(
                QtGui.QPixmap(':/images/background2.png')))
        elif text == "Gray Grid":
            self.active_scene.setBackgroundBrush(QtGui.QBrush(
                QtGui.QPixmap(':/images/background3.png')))
        else:
            self.active_scene.setBackgroundBrush(QtGui.QBrush(
                QtGui.QPixmap(':/images/background4.png')))

        self.active_scene.update()
        self.graphicsView.update()

    def blockButtonGroupClicked(self, id):
        buttons = self.blockButtonGroup.buttons()
        for button in buttons:
            if self.blockButtonGroup.button(id) != button:
                button.setChecked(False)

        if id == self.InsertTextButton:
            self.active_scene.setMode(DiagramScene.InsertText)
        else:
            self.active_scene.setItemType(id)
            self.active_scene.setMode(DiagramScene.InsertItem)


    def pointerGroupClicked(self, i):
        self.scene.setMode(self.pointerTypeGroup.checkedId())

    # TODO figure out necessity of this?
    def itemInserted(self, item):
        self.pointerTypeGroup.button(DiagramScene.MoveItem).setChecked(True)
        self.scene.setMode(self.pointerTypeGroup.checkedId())
        self.blockButtonGroup.button(item.diagramType).setChecked(False)

    def textInserted(self, item):
        self.blockButtonGroup.button(self.InsertTextButton).setChecked(False)
        self.scene.setMode(self.pointerTypeGroup.checkedId())

    def currentFontChanged(self, font):
        self.handleFontChange()

    def fontSizeChanged(self, font):
        self.handleFontChange()

    # TODO move to scene?
    def sceneScaleChanged(self, scale):
        newScale = float(scale.replace('%', '')) / 100.0
        oldMatrix = self.graphicsView.matrix()
        self.graphicsView.resetMatrix()
        self.graphicsView.translate(oldMatrix.dx(), oldMatrix.dy())
        self.graphicsView.scale(newScale, newScale)

    def textColorChanged(self):
        self.textAction = self.sender()
        self.fontColorToolButton.setIcon(self.createColorToolButtonIcon(
            ':/images/textpointer.png',
            QtGui.QColor(self.textAction.data())))
        self.textButtonTriggered()

    def itemColorChanged(self):
        self.fillAction = self.sender()
        self.fillColorToolButton.setIcon(self.createColorToolButtonIcon(
            ':/images/floodfill.png',
            QtGui.QColor(self.fillAction.data())))
        self.fillButtonTriggered()

    def lineColorChanged(self):
        self.lineAction = self.sender()
        self.lineColorToolButton.setIcon(self.createColorToolButtonIcon(
            ':/images/linecolor.png',
            QtGui.QColor(self.lineAction.data())))
        self.lineButtonTriggered()

    def textButtonTriggered(self):
        self.scene.setTextColor(QtGui.QColor(self.textAction.data()))

    def fillButtonTriggered(self):
        self.scene.setItemColor(QtGui.QColor(self.fillAction.data()))

    def lineButtonTriggered(self):
        self.scene.setLineColor(QtGui.QColor(self.lineAction.data()))

    def handleFontChange(self):
        font = self.fontCombo.currentFont()
        font.setPointSize(self.fontSizeCombo.currentText().toInt()[0])
        if self.boldAction.isChecked():
            font.setWeight(QtGui.QFont.Bold)
        else:
            font.setWeight(QtGui.QFont.Normal)
        font.setItalic(self.italicAction.isChecked())
        font.setUnderline(self.underlineAction.isChecked())

        self.scene.setFont(font)

    def itemSelected(self, item):
        font = item.font()
        color = item.defaultTextColor()
        self.fontCombo.setCurrentFont(font)
        self.fontSizeCombo.setEditText(str(font.pointSize()))
        self.boldAction.setChecked(font.weight() == QtGui.QFont.Bold)
        self.italicAction.setChecked(font.italic())
        self.underlineAction.setChecked(font.underline())

    def about(self):
        QtGui.QMessageBox.about(self, "imagepypelines",
                                "Here's our github website: <a href='https://github.com/jmaggio14/imagepypelines'>https://github.com/jmaggio14/imagepypelines</a>")

    def createToolBox(self):
        # TODO add user-defined widgets to the tool box
        # TODO add user-defined pipelines to the tool box

        #### built-in widgets
        layout = QtGui.QGridLayout()
        layout.setRowStretch(2, 10)
        layout.setColumnStretch(5, 10)

        self.blockButtonGroup = QtGui.QButtonGroup()
        self.blockButtonGroup.setExclusive(False)
        self.blockButtonGroup.buttonClicked[int].connect(self.blockButtonGroupClicked)

        self.blockCellWidgets = []
        for name, block in ip.builtin_blocks.__dict__.items():
            try:
                # print(name,block)
                # TODO split this out to a function?
                if issubclass(block, ip.core.BaseBlock):
                    n = len(self.blockCellWidgets)  # convert to 2d idx where shape is (2, M)
                    block.name = name
                    item = QtBlock(block=block)
                    icon = QtGui.QIcon(item.image())

                    button = QtGui.QToolButton()
                    button.setIcon(icon)
                    button.setIconSize(QtCore.QSize(50, 50))
                    button.setCheckable(True)
                    self.blockButtonGroup.addButton(button, n)

                    innerlayout = QtGui.QGridLayout()
                    innerlayout.addWidget(button, 0, 0, QtCore.Qt.AlignHCenter)
                    innerlayout.addWidget(QtGui.QLabel(name), 1, 0, QtCore.Qt.AlignCenter)

                    widget = QtGui.QWidget()
                    widget.setLayout(innerlayout)

                    self.blockCellWidgets.append(widget)
                
                    layout.addWidget(widget, int(n//2), int(n%2))
            except TypeError as e:
                #print(e)
                pass   # comes from the non-block non-class items in ip.builtin_blocks

        self.blockBox.setLayout(layout)

        #### built-in pipelines
        layout = QtGui.QGridLayout()
        layout.setRowStretch(2, 10)
        layout.setColumnStretch(5, 10)

        self.pipelineButtonGroup = QtGui.QButtonGroup()

        self.pipelineCellWidgets = []
        self.builtinpipeline_funcs = []
        for name in ip.builtin_pipelines.__all__:
            try:
                # this appears to a function which constructs a pipeline.
                pipeline_func = ip.builtin_pipelines.__dict__[name]
                print(pipeline_func)
                # TODO split this out to a function?
                
                n = len(self.pipelineCellWidgets)  # convert to 2d idx where shape is (2, M)
                # pipeline.name = name
                icon = QtGui.QIcon(':/images/addpipeline.png')   # TODO pipeline icon

                button = QtGui.QToolButton()
                button.setIcon(icon)
                button.setIconSize(QtCore.QSize(50, 50))
                # self.builtinpipeline_funcs.append()
                button.pressed.connect(lambda pipeline_func=pipeline_func:self.addPipeline(pipeline_func()))
                self.blockButtonGroup.addButton(button, n)

                innerlayout = QtGui.QGridLayout()
                innerlayout.addWidget(button, 0, 0, QtCore.Qt.AlignHCenter)
                innerlayout.addWidget(QtGui.QLabel(name), 1, 0, QtCore.Qt.AlignCenter)

                widget = QtGui.QWidget()
                widget.setLayout(innerlayout)

                self.pipelineCellWidgets.append(widget)
            
                layout.addWidget(widget, int(n//2), int(n%2))
            except TypeError as e:
                print(e)
                pass   # comes from the non-block non-class items in ip.builtin_blocks

        self.pipelineBox.setLayout(layout)

        self.backgroundButtonGroup = QtGui.QButtonGroup()
        self.backgroundButtonGroup.buttonClicked.connect(
            self.backgroundButtonGroupClicked)

        backgroundLayout = QtGui.QGridLayout()
        backgroundLayout.addWidget(self.createBackgroundCellWidget("Blue Grid",
                                                                   ':/images/background1.png'), 0, 0)
        backgroundLayout.addWidget(self.createBackgroundCellWidget("White Grid",
                                                                   ':/images/background2.png'), 0, 1)
        backgroundLayout.addWidget(self.createBackgroundCellWidget("Gray Grid",
                                                                   ':/images/background3.png'), 1, 0)
        backgroundLayout.addWidget(self.createBackgroundCellWidget("No Grid",
                                                                   ':/images/background4.png'), 1, 1)

        backgroundLayout.setRowStretch(2, 10)
        backgroundLayout.setColumnStretch(2, 10)
        self.backgroundBox.setLayout(backgroundLayout)
        self.toolBox.setMinimumWidth(backgroundLayout.sizeHint().width())

    def connectActions(self):
        # TODO add "save pipeline" action
        # TODO add "load pipeline" action
        # TODO add "debug pipeline" action
        self.actionAbout.triggered.connect(self.about)
        
        self.actionExit.triggered.connect(self.close)
        self.actionDelete.triggered.connect(self.active_scene.deleteItem)
        self.actionSend_to_back.triggered.connect(self.active_scene.sendToBack)
        self.actionMove_to_Front.triggered.connect(self.active_scene.bringToFront)

        self.actionNewPipeline.triggered.connect(self.addPipeline)
        self.actionRun.triggered.connect(self.active_scene.process)
        self.actionLoad_Pipeline.triggered.connect(self.loadPipelineFromFile)
        self.actionSave_Pipeline.triggered.connect(self.savePipelineToFile)

        self.pipelineSelector.currentIndexChanged[int].connect(self.switchPipeline)


    # def createToolbars(self):
    #     # TODO add actions to toolbars
    #     self.editToolBar = self.addToolBar("Edit")
    #     self.editToolBar.addAction(self.actionDelete)
    #     self.editToolBar.addAction(self.actionMove_to_Front)
    #     self.editToolBar.addAction(self.actionSend_to_back)

    #     self.fontCombo = QtGui.QFontComboBox()
    #     self.fontCombo.currentFontChanged.connect(self.currentFontChanged)

    #     self.fontSizeCombo = QtGui.QComboBox()
    #     self.fontSizeCombo.setEditable(True)
    #     for i in range(8, 30, 2):
    #         self.fontSizeCombo.addItem(str(i))
    #     validator = QtGui.QIntValidator(2, 64, self)
    #     self.fontSizeCombo.setValidator(validator)
    #     self.fontSizeCombo.currentIndexChanged.connect(self.fontSizeChanged)

    #     self.fontColorToolButton = QtGui.QToolButton()
    #     self.fontColorToolButton.setPopupMode(
    #         QtGui.QToolButton.MenuButtonPopup)
    #     self.fontColorToolButton.setMenu(
    #         self.createColorMenu(self.textColorChanged, QtCore.Qt.black))
    #     self.textAction = self.fontColorToolButton.menu().defaultAction()
    #     self.fontColorToolButton.setIcon(
    #         self.createColorToolButtonIcon(':/images/textpointer.png',
    #                                        QtCore.Qt.black))
    #     self.fontColorToolButton.setAutoFillBackground(True)
    #     self.fontColorToolButton.clicked.connect(self.textButtonTriggered)

    #     self.fillColorToolButton = QtGui.QToolButton()
    #     self.fillColorToolButton.setPopupMode(
    #         QtGui.QToolButton.MenuButtonPopup)
    #     self.fillColorToolButton.setMenu(
    #         self.createColorMenu(self.itemColorChanged, QtCore.Qt.white))
    #     self.fillAction = self.fillColorToolButton.menu().defaultAction()
    #     self.fillColorToolButton.setIcon(
    #         self.createColorToolButtonIcon(':/images/floodfill.png',
    #                                        QtCore.Qt.white))
    #     self.fillColorToolButton.clicked.connect(self.fillButtonTriggered)

    #     self.lineColorToolButton = QtGui.QToolButton()
    #     self.lineColorToolButton.setPopupMode(
    #         QtGui.QToolButton.MenuButtonPopup)
    #     self.lineColorToolButton.setMenu(
    #         self.createColorMenu(self.lineColorChanged, QtCore.Qt.black))
    #     self.lineAction = self.lineColorToolButton.menu().defaultAction()
    #     self.lineColorToolButton.setIcon(
    #         self.createColorToolButtonIcon(':/images/linecolor.png',
    #                                        QtCore.Qt.black))
    #     self.lineColorToolButton.clicked.connect(self.lineButtonTriggered)

    #     self.colorToolBar = self.addToolBar("Color")
    #     self.colorToolBar.addWidget(self.fontColorToolButton)
    #     self.colorToolBar.addWidget(self.fillColorToolButton)
    #     self.colorToolBar.addWidget(self.lineColorToolButton)

    #     pointerButton = QtGui.QToolButton()
    #     pointerButton.setCheckable(True)
    #     pointerButton.setChecked(True)
    #     pointerButton.setIcon(QtGui.QIcon(':/images/pointer.png'))
    #     linePointerButton = QtGui.QToolButton()
    #     linePointerButton.setCheckable(True)
    #     linePointerButton.setIcon(QtGui.QIcon(':/images/linepointer.png'))

    #     self.pointerTypeGroup = QtGui.QButtonGroup()
    #     self.pointerTypeGroup.addButton(pointerButton, DiagramScene.MoveItem)
    #     self.pointerTypeGroup.addButton(linePointerButton,
    #                                     DiagramScene.InsertLine)
    #     self.pointerTypeGroup.buttonClicked[int].connect(
    #         self.pointerGroupClicked)

    #     self.sceneScaleCombo = QtGui.QComboBox()
    #     self.sceneScaleCombo.addItems(["50%", "75%", "100%", "125%", "150%"])
    #     self.sceneScaleCombo.setCurrentIndex(2)
    #     self.sceneScaleCombo.currentIndexChanged[str].connect(
    #         self.sceneScaleChanged)

    #     self.pointerToolbar = self.addToolBar("Pointer type")
    #     self.pointerToolbar.addWidget(pointerButton)
    #     self.pointerToolbar.addWidget(linePointerButton)
    #     self.pointerToolbar.addWidget(self.sceneScaleCombo)

    def createBackgroundCellWidget(self, text, image):
        button = QtGui.QToolButton()
        button.setText(text)
        button.setIcon(QtGui.QIcon(image))
        button.setIconSize(QtCore.QSize(50, 50))
        button.setCheckable(True)
        self.backgroundButtonGroup.addButton(button)

        layout = QtGui.QGridLayout()
        layout.addWidget(button, 0, 0, QtCore.Qt.AlignHCenter)
        layout.addWidget(QtGui.QLabel(text), 1, 0, QtCore.Qt.AlignCenter)

        widget = QtGui.QWidget()
        widget.setLayout(layout)

        return widget

    # TODO add user cache directory settings
    # TODO add user interpreter setup script location setting
    # TODO add 
    def saveSettings(self):
        settings = QtCore.QSettings('imagepypelines', 'imagepypelines GUI')

        geo = self.frameGeometry()
        settings.setValue('window_geometry', [geo.x(), geo.y(), geo.width(), geo.height()])

    def loadSettings(self):
        settings = QtCore.QSettings('imagepypelines', 'imagepypelines GUI')

        geo = settings.value('window_geometry', type=int)
        if geo:
            self.setGeometry(*geo)

    # def createCellWidget(self, text, diagramType):
    #     item = DiagramItem(diagramType, self.itemMenu)
    #     icon = QtGui.QIcon(item.image())

    #     button = QtGui.QToolButton()
    #     button.setIcon(icon)
    #     button.setIconSize(QtCore.QSize(50, 50))
    #     button.setCheckable(True)
    #     self.blockButtonGroup.addButton(button, diagramType)

    #     layout = QtGui.QGridLayout()
    #     layout.addWidget(button, 0, 0, QtCore.Qt.AlignHCenter)
    #     layout.addWidget(QtGui.QLabel(text), 1, 0, QtCore.Qt.AlignCenter)

    #     widget = QtGui.QWidget()
    #     widget.setLayout(layout)

    #     return widget

    # def createColorMenu(self, slot, defaultColor):
    #     colors = [QtCore.Qt.black, QtCore.Qt.white,
    #               QtCore.Qt.red, QtCore.Qt.blue, QtCore.Qt.yellow]
    #     names = ["black", "white", "red", "blue", "yellow"]

    #     colorMenu = QtGui.QMenu(self)
    #     for color, name in zip(colors, names):
    #         action = QtGui.QAction(self.createColorIcon(color), name, self,
    #                                triggered=slot)
    #         action.setData(QtGui.QColor(color))
    #         colorMenu.addAction(action)
    #         if color == defaultColor:
    #             colorMenu.setDefaultAction(action)
    #     return colorMenu

    # def createColorToolButtonIcon(self, imageFile, color):
    #     pixmap = QtGui.QPixmap(50, 80)
    #     pixmap.fill(QtCore.Qt.transparent)
    #     painter = QtGui.QPainter(pixmap)
    #     image = QtGui.QPixmap(imageFile)
    #     target = QtCore.QRect(0, 0, 50, 60)
    #     source = QtCore.QRect(0, 0, 42, 42)
    #     painter.fillRect(QtCore.QRect(0, 60, 50, 80), color)
    #     painter.drawPixmap(target, image, source)
    #     painter.end()

    #     return QtGui.QIcon(pixmap)

    # def createColorIcon(self, color):
    #     pixmap = QtGui.QPixmap(20, 20)
    #     painter = QtGui.QPainter(pixmap)
    #     painter.setPen(QtCore.Qt.NoPen)
    #     painter.fillRect(QtCore.QRect(0, 0, 20, 20), color)
    #     painter.end()

    #     return QtGui.QIcon(pixmap)

